
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000003ec  00000480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080006c  0080006c  0000048c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000dd  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000042a  00000000  00000000  00000589  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018d  00000000  00000000  000009b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042c  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015e  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000098  00000000  00000000  0000115a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000011f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8d 01 	jmp	0x31a	; 0x31a <__vector_1>
   8:	0c 94 b9 01 	jmp	0x372	; 0x372 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 28 01 	call	0x250	; 0x250 <main>
  8a:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_SSD>:
void split(void);
void init_SSD(void);
	
void init_SSD(){
	
	SSD_DATA_DDR = 0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 bb       	out	0x14, r24	; 20
	SSD_DIGI_DDR |=1<<DIGIT0 |1<<DIGIT1 |1<<DIGIT2 |1<<DIGIT3 ;
  96:	8a b3       	in	r24, 0x1a	; 26
  98:	80 6f       	ori	r24, 0xF0	; 240
  9a:	8a bb       	out	0x1a, r24	; 26
	SSD_DATA_PORT =0x00;
  9c:	15 ba       	out	0x15, r1	; 21
	SSD_DIGI_PORT &=~(1<<DIGIT0 |1<<DIGIT1 |1<<DIGIT2 |1<<DIGIT3);
  9e:	8b b3       	in	r24, 0x1b	; 27
  a0:	8f 70       	andi	r24, 0x0F	; 15
  a2:	8b bb       	out	0x1b, r24	; 27
}
  a4:	08 95       	ret

000000a6 <ssd_digit>:

void ssd_digit(unsigned int n){
  a6:	bf 92       	push	r11
  a8:	cf 92       	push	r12
  aa:	df 92       	push	r13
  ac:	ef 92       	push	r14
  ae:	ff 92       	push	r15
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	7c 01       	movw	r14, r24
	for(int i=0;i<n;i++){
		SSD_DATA_PORT = display[ssd_dig[0]] | 1<<DIGIT3;
  ba:	80 91 6c 00 	lds	r24, 0x006C
  be:	68 2f       	mov	r22, r24
  c0:	70 e0       	ldi	r23, 0x00	; 0
		SSD_DIGI_PORT =1<< DIGIT0;
		_delay_us(100);
		SSD_DIGI_PORT &=~(1<<DIGIT0);
		
		SSD_DATA_PORT = display[ssd_dig[1]];
  c2:	80 91 6d 00 	lds	r24, 0x006D
  c6:	48 2f       	mov	r20, r24
  c8:	50 e0       	ldi	r21, 0x00	; 0
		SSD_DIGI_PORT =1<< DIGIT1;
		_delay_us(100);
		SSD_DIGI_PORT &=~(1<<DIGIT1);
		
		SSD_DATA_PORT = display[ssd_dig[2]] | 1<<DIGIT3;
  ca:	80 91 6e 00 	lds	r24, 0x006E
  ce:	c8 2f       	mov	r28, r24
  d0:	d0 e0       	ldi	r29, 0x00	; 0
		SSD_DIGI_PORT =1<< DIGIT2;
		_delay_us(100);
		SSD_DIGI_PORT &=~(1<<DIGIT2);
		
		SSD_DATA_PORT = display[ssd_dig[3]];
  d2:	80 91 6f 00 	lds	r24, 0x006F
  d6:	a8 2f       	mov	r26, r24
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
	SSD_DIGI_PORT &=~(1<<DIGIT0 |1<<DIGIT1 |1<<DIGIT2 |1<<DIGIT3);
}

void ssd_digit(unsigned int n){
	for(int i=0;i<n;i++){
		SSD_DATA_PORT = display[ssd_dig[0]] | 1<<DIGIT3;
  de:	60 5a       	subi	r22, 0xA0	; 160
  e0:	7f 4f       	sbci	r23, 0xFF	; 255
		SSD_DIGI_PORT =1<< DIGIT0;
  e2:	e0 e1       	ldi	r30, 0x10	; 16
  e4:	be 2e       	mov	r11, r30
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e6:	08 ec       	ldi	r16, 0xC8	; 200
  e8:	10 e0       	ldi	r17, 0x00	; 0
		_delay_us(100);
		SSD_DIGI_PORT &=~(1<<DIGIT0);
		
		SSD_DATA_PORT = display[ssd_dig[1]];
  ea:	40 5a       	subi	r20, 0xA0	; 160
  ec:	5f 4f       	sbci	r21, 0xFF	; 255
		SSD_DIGI_PORT =1<< DIGIT1;
  ee:	90 e2       	ldi	r25, 0x20	; 32
  f0:	c9 2e       	mov	r12, r25
		_delay_us(100);
		SSD_DIGI_PORT &=~(1<<DIGIT1);
		
		SSD_DATA_PORT = display[ssd_dig[2]] | 1<<DIGIT3;
  f2:	c0 5a       	subi	r28, 0xA0	; 160
  f4:	df 4f       	sbci	r29, 0xFF	; 255
		SSD_DIGI_PORT =1<< DIGIT2;
  f6:	80 e4       	ldi	r24, 0x40	; 64
  f8:	d8 2e       	mov	r13, r24
		_delay_us(100);
		SSD_DIGI_PORT &=~(1<<DIGIT2);
		
		SSD_DATA_PORT = display[ssd_dig[3]];
  fa:	a0 5a       	subi	r26, 0xA0	; 160
  fc:	bf 4f       	sbci	r27, 0xFF	; 255
		SSD_DIGI_PORT =1<< DIGIT3;
  fe:	90 e8       	ldi	r25, 0x80	; 128
 100:	22 c0       	rjmp	.+68     	; 0x146 <ssd_digit+0xa0>
	SSD_DIGI_PORT &=~(1<<DIGIT0 |1<<DIGIT1 |1<<DIGIT2 |1<<DIGIT3);
}

void ssd_digit(unsigned int n){
	for(int i=0;i<n;i++){
		SSD_DATA_PORT = display[ssd_dig[0]] | 1<<DIGIT3;
 102:	fb 01       	movw	r30, r22
 104:	80 81       	ld	r24, Z
 106:	80 68       	ori	r24, 0x80	; 128
 108:	85 bb       	out	0x15, r24	; 21
		SSD_DIGI_PORT =1<< DIGIT0;
 10a:	bb ba       	out	0x1b, r11	; 27
 10c:	f8 01       	movw	r30, r16
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <ssd_digit+0x68>
		_delay_us(100);
		SSD_DIGI_PORT &=~(1<<DIGIT0);
 112:	dc 98       	cbi	0x1b, 4	; 27
		
		SSD_DATA_PORT = display[ssd_dig[1]];
 114:	fa 01       	movw	r30, r20
 116:	80 81       	ld	r24, Z
 118:	85 bb       	out	0x15, r24	; 21
		SSD_DIGI_PORT =1<< DIGIT1;
 11a:	cb ba       	out	0x1b, r12	; 27
 11c:	f8 01       	movw	r30, r16
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <ssd_digit+0x78>
		_delay_us(100);
		SSD_DIGI_PORT &=~(1<<DIGIT1);
 122:	dd 98       	cbi	0x1b, 5	; 27
		
		SSD_DATA_PORT = display[ssd_dig[2]] | 1<<DIGIT3;
 124:	88 81       	ld	r24, Y
 126:	80 68       	ori	r24, 0x80	; 128
 128:	85 bb       	out	0x15, r24	; 21
		SSD_DIGI_PORT =1<< DIGIT2;
 12a:	db ba       	out	0x1b, r13	; 27
 12c:	f8 01       	movw	r30, r16
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <ssd_digit+0x88>
		_delay_us(100);
		SSD_DIGI_PORT &=~(1<<DIGIT2);
 132:	de 98       	cbi	0x1b, 6	; 27
		
		SSD_DATA_PORT = display[ssd_dig[3]];
 134:	8c 91       	ld	r24, X
 136:	85 bb       	out	0x15, r24	; 21
		SSD_DIGI_PORT =1<< DIGIT3;
 138:	9b bb       	out	0x1b, r25	; 27
 13a:	f8 01       	movw	r30, r16
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <ssd_digit+0x96>
		_delay_us(100);
		SSD_DIGI_PORT &=~(1<<DIGIT3);
 140:	df 98       	cbi	0x1b, 7	; 27
	SSD_DATA_PORT =0x00;
	SSD_DIGI_PORT &=~(1<<DIGIT0 |1<<DIGIT1 |1<<DIGIT2 |1<<DIGIT3);
}

void ssd_digit(unsigned int n){
	for(int i=0;i<n;i++){
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	3f 4f       	sbci	r19, 0xFF	; 255
 146:	2e 15       	cp	r18, r14
 148:	3f 05       	cpc	r19, r15
 14a:	d8 f2       	brcs	.-74     	; 0x102 <ssd_digit+0x5c>
		SSD_DATA_PORT = display[ssd_dig[3]];
		SSD_DIGI_PORT =1<< DIGIT3;
		_delay_us(100);
		SSD_DIGI_PORT &=~(1<<DIGIT3);
	}
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	ff 90       	pop	r15
 156:	ef 90       	pop	r14
 158:	df 90       	pop	r13
 15a:	cf 90       	pop	r12
 15c:	bf 90       	pop	r11
 15e:	08 95       	ret

00000160 <split>:
void split(){
	if (min<=9){
 160:	80 91 72 00 	lds	r24, 0x0072
 164:	90 91 73 00 	lds	r25, 0x0073
 168:	0a 97       	sbiw	r24, 0x0a	; 10
 16a:	20 f5       	brcc	.+72     	; 0x1b4 <split+0x54>
		ssd_dig[0]=min;
 16c:	80 91 72 00 	lds	r24, 0x0072
 170:	90 91 73 00 	lds	r25, 0x0073
 174:	80 93 6c 00 	sts	0x006C, r24
		ssd_dig[1]=sec/10;
 178:	80 91 70 00 	lds	r24, 0x0070
 17c:	90 91 71 00 	lds	r25, 0x0071
 180:	6a e0       	ldi	r22, 0x0A	; 10
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__udivmodhi4>
 188:	60 93 6d 00 	sts	0x006D, r22
		ssd_dig[2]=sec%10;
 18c:	80 91 70 00 	lds	r24, 0x0070
 190:	90 91 71 00 	lds	r25, 0x0071
 194:	6a e0       	ldi	r22, 0x0A	; 10
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__udivmodhi4>
 19c:	80 93 6e 00 	sts	0x006E, r24
		ssd_dig[3]=mil_sec/100;
 1a0:	80 91 76 00 	lds	r24, 0x0076
 1a4:	90 91 77 00 	lds	r25, 0x0077
 1a8:	64 e6       	ldi	r22, 0x64	; 100
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__udivmodhi4>
 1b0:	60 93 6f 00 	sts	0x006F, r22
	}
	if(min >=10){
 1b4:	80 91 72 00 	lds	r24, 0x0072
 1b8:	90 91 73 00 	lds	r25, 0x0073
 1bc:	0a 97       	sbiw	r24, 0x0a	; 10
 1be:	20 f1       	brcs	.+72     	; 0x208 <split+0xa8>
		ssd_dig[0] = h;
 1c0:	80 91 74 00 	lds	r24, 0x0074
 1c4:	90 91 75 00 	lds	r25, 0x0075
 1c8:	80 93 6c 00 	sts	0x006C, r24
		ssd_dig[1] = min/10;
 1cc:	80 91 72 00 	lds	r24, 0x0072
 1d0:	90 91 73 00 	lds	r25, 0x0073
 1d4:	6a e0       	ldi	r22, 0x0A	; 10
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__udivmodhi4>
 1dc:	60 93 6d 00 	sts	0x006D, r22
		ssd_dig[2] = min%10;
 1e0:	80 91 72 00 	lds	r24, 0x0072
 1e4:	90 91 73 00 	lds	r25, 0x0073
 1e8:	6a e0       	ldi	r22, 0x0A	; 10
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__udivmodhi4>
 1f0:	80 93 6e 00 	sts	0x006E, r24
		ssd_dig[3] = sec/10;
 1f4:	80 91 70 00 	lds	r24, 0x0070
 1f8:	90 91 71 00 	lds	r25, 0x0071
 1fc:	6a e0       	ldi	r22, 0x0A	; 10
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__udivmodhi4>
 204:	60 93 6f 00 	sts	0x006F, r22
 208:	08 95       	ret

0000020a <timer0_interrupt>:
    }
	return 0;
}

void timer0_interrupt(){
	TCNT0 = 0x00;
 20a:	12 be       	out	0x32, r1	; 50
	TIMSK |=(1<<OCIE0);
 20c:	89 b7       	in	r24, 0x39	; 57
 20e:	82 60       	ori	r24, 0x02	; 2
 210:	89 bf       	out	0x39, r24	; 57
	OCR0 = 31;
 212:	8f e1       	ldi	r24, 0x1F	; 31
 214:	8c bf       	out	0x3c, r24	; 60
	GICR |= 1<<INT0 | 1<<INT1;   
 216:	8b b7       	in	r24, 0x3b	; 59
 218:	80 6c       	ori	r24, 0xC0	; 192
 21a:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 1<<ISC01| 1<<ISC11;
 21c:	85 b7       	in	r24, 0x35	; 53
 21e:	8a 60       	ori	r24, 0x0A	; 10
 220:	85 bf       	out	0x35, r24	; 53
	if(cliflag ==0){
 222:	80 91 78 00 	lds	r24, 0x0078
 226:	90 91 79 00 	lds	r25, 0x0079
 22a:	89 2b       	or	r24, r25
 22c:	11 f4       	brne	.+4      	; 0x232 <timer0_interrupt+0x28>
		sei();
 22e:	78 94       	sei
 230:	08 95       	ret
	}else{
		cli();
 232:	f8 94       	cli
 234:	80 e2       	ldi	r24, 0x20	; 32
 236:	9e e4       	ldi	r25, 0x4E	; 78
 238:	28 ec       	ldi	r18, 0xC8	; 200
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	f9 01       	movw	r30, r18
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <timer0_interrupt+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 242:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 244:	d9 f7       	brne	.-10     	; 0x23c <timer0_interrupt+0x32>
		_delay_ms(2000);
		cliflag =0;
 246:	10 92 79 00 	sts	0x0079, r1
 24a:	10 92 78 00 	sts	0x0078, r1
 24e:	08 95       	ret

00000250 <main>:
volatile unsigned int start_stop_flag=1;
unsigned int cliflag =0;
void timer0_interrupt(void);

int main(void){
	timer0_interrupt();
 250:	0e 94 05 01 	call	0x20a	; 0x20a <timer0_interrupt>
	init_SSD();
 254:	0e 94 49 00 	call	0x92	; 0x92 <init_SSD>
	DDRD &=~(1<<in2);
 258:	8a 98       	cbi	0x11, 2	; 17
    while (1){

		split();
 25a:	0e 94 b0 00 	call	0x160	; 0x160 <split>
		ssd_digit(1);
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 53 00 	call	0xa6	; 0xa6 <ssd_digit>
 266:	f9 cf       	rjmp	.-14     	; 0x25a <main+0xa>

00000268 <__vector_10>:
		_delay_ms(2000);
		cliflag =0;
	}
}

ISR(TIMER0_COMP_vect){
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	2f 93       	push	r18
 274:	8f 93       	push	r24
 276:	9f 93       	push	r25
	mil_sec++;
 278:	80 91 76 00 	lds	r24, 0x0076
 27c:	90 91 77 00 	lds	r25, 0x0077
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	90 93 77 00 	sts	0x0077, r25
 286:	80 93 76 00 	sts	0x0076, r24
	if(mil_sec >= 1000){
 28a:	80 91 76 00 	lds	r24, 0x0076
 28e:	90 91 77 00 	lds	r25, 0x0077
 292:	88 5e       	subi	r24, 0xE8	; 232
 294:	93 40       	sbci	r25, 0x03	; 3
 296:	98 f1       	brcs	.+102    	; 0x2fe <__vector_10+0x96>
		mil_sec = 0;
 298:	10 92 77 00 	sts	0x0077, r1
 29c:	10 92 76 00 	sts	0x0076, r1
		sec++;
 2a0:	80 91 70 00 	lds	r24, 0x0070
 2a4:	90 91 71 00 	lds	r25, 0x0071
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	90 93 71 00 	sts	0x0071, r25
 2ae:	80 93 70 00 	sts	0x0070, r24
		if(sec >= 60){
 2b2:	80 91 70 00 	lds	r24, 0x0070
 2b6:	90 91 71 00 	lds	r25, 0x0071
 2ba:	cc 97       	sbiw	r24, 0x3c	; 60
 2bc:	00 f1       	brcs	.+64     	; 0x2fe <__vector_10+0x96>
			sec = 0;
 2be:	10 92 71 00 	sts	0x0071, r1
 2c2:	10 92 70 00 	sts	0x0070, r1
			min++;
 2c6:	80 91 72 00 	lds	r24, 0x0072
 2ca:	90 91 73 00 	lds	r25, 0x0073
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	90 93 73 00 	sts	0x0073, r25
 2d4:	80 93 72 00 	sts	0x0072, r24
			if(min >= 60){
 2d8:	80 91 72 00 	lds	r24, 0x0072
 2dc:	90 91 73 00 	lds	r25, 0x0073
 2e0:	cc 97       	sbiw	r24, 0x3c	; 60
 2e2:	68 f0       	brcs	.+26     	; 0x2fe <__vector_10+0x96>
				min = 0;
 2e4:	10 92 73 00 	sts	0x0073, r1
 2e8:	10 92 72 00 	sts	0x0072, r1
				h++;
 2ec:	80 91 74 00 	lds	r24, 0x0074
 2f0:	90 91 75 00 	lds	r25, 0x0075
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	90 93 75 00 	sts	0x0075, r25
 2fa:	80 93 74 00 	sts	0x0074, r24
			}
		}
	}
	cliflag =1;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	90 93 79 00 	sts	0x0079, r25
 306:	80 93 78 00 	sts	0x0078, r24
}
 30a:	9f 91       	pop	r25
 30c:	8f 91       	pop	r24
 30e:	2f 91       	pop	r18
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <__vector_1>:

ISR(INT0_vect){
 31a:	1f 92       	push	r1
 31c:	0f 92       	push	r0
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	0f 92       	push	r0
 322:	11 24       	eor	r1, r1
 324:	8f 93       	push	r24
 326:	9f 93       	push	r25
	if(start_stop_flag == 1){
 328:	80 91 6a 00 	lds	r24, 0x006A
 32c:	90 91 6b 00 	lds	r25, 0x006B
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	41 f4       	brne	.+16     	; 0x344 <__vector_1+0x2a>
		TCCR0 |= 1<<WGM01 | 1<<CS02;
 334:	83 b7       	in	r24, 0x33	; 51
 336:	8c 60       	ori	r24, 0x0C	; 12
 338:	83 bf       	out	0x33, r24	; 51
		start_stop_flag = 0;
 33a:	10 92 6b 00 	sts	0x006B, r1
 33e:	10 92 6a 00 	sts	0x006A, r1
 342:	09 c0       	rjmp	.+18     	; 0x356 <__vector_1+0x3c>
		}else{
			start_stop_flag = 1;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	90 93 6b 00 	sts	0x006B, r25
 34c:	80 93 6a 00 	sts	0x006A, r24
			TCCR0 &= ~(1<<CS02);
 350:	83 b7       	in	r24, 0x33	; 51
 352:	8b 7f       	andi	r24, 0xFB	; 251
 354:	83 bf       	out	0x33, r24	; 51
		}
	while((PIND & (1<<in2))==1);
 356:	80 b3       	in	r24, 0x10	; 16
	cliflag =1;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	90 93 79 00 	sts	0x0079, r25
 360:	80 93 78 00 	sts	0x0078, r24
}
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

00000372 <__vector_2>:

ISR(INT1_vect){
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	8f 93       	push	r24
 37e:	9f 93       	push	r25
	TCCR0 &= ~(1<<CS02);
 380:	83 b7       	in	r24, 0x33	; 51
 382:	8b 7f       	andi	r24, 0xFB	; 251
 384:	83 bf       	out	0x33, r24	; 51
	mil_sec = 0;
 386:	10 92 77 00 	sts	0x0077, r1
 38a:	10 92 76 00 	sts	0x0076, r1
	sec = 0;
 38e:	10 92 71 00 	sts	0x0071, r1
 392:	10 92 70 00 	sts	0x0070, r1
	min = 0;
 396:	10 92 73 00 	sts	0x0073, r1
 39a:	10 92 72 00 	sts	0x0072, r1
	h = 0;	
 39e:	10 92 75 00 	sts	0x0075, r1
 3a2:	10 92 74 00 	sts	0x0074, r1
	cliflag =1;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	90 93 79 00 	sts	0x0079, r25
 3ae:	80 93 78 00 	sts	0x0078, r24
}
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	0f 90       	pop	r0
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	0f 90       	pop	r0
 3bc:	1f 90       	pop	r1
 3be:	18 95       	reti

000003c0 <__udivmodhi4>:
 3c0:	aa 1b       	sub	r26, r26
 3c2:	bb 1b       	sub	r27, r27
 3c4:	51 e1       	ldi	r21, 0x11	; 17
 3c6:	07 c0       	rjmp	.+14     	; 0x3d6 <__udivmodhi4_ep>

000003c8 <__udivmodhi4_loop>:
 3c8:	aa 1f       	adc	r26, r26
 3ca:	bb 1f       	adc	r27, r27
 3cc:	a6 17       	cp	r26, r22
 3ce:	b7 07       	cpc	r27, r23
 3d0:	10 f0       	brcs	.+4      	; 0x3d6 <__udivmodhi4_ep>
 3d2:	a6 1b       	sub	r26, r22
 3d4:	b7 0b       	sbc	r27, r23

000003d6 <__udivmodhi4_ep>:
 3d6:	88 1f       	adc	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	5a 95       	dec	r21
 3dc:	a9 f7       	brne	.-22     	; 0x3c8 <__udivmodhi4_loop>
 3de:	80 95       	com	r24
 3e0:	90 95       	com	r25
 3e2:	bc 01       	movw	r22, r24
 3e4:	cd 01       	movw	r24, r26
 3e6:	08 95       	ret

000003e8 <_exit>:
 3e8:	f8 94       	cli

000003ea <__stop_program>:
 3ea:	ff cf       	rjmp	.-2      	; 0x3ea <__stop_program>
